-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fde_ip_decode is
port (
    ap_ready : OUT STD_LOGIC;
    instruction : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of fde_ip_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 : STD_LOGIC_VECTOR (2 downto 0);
    signal opch_V_fu_256_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal opcl_V_fu_266_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_1_fu_396_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln75_2_fu_332_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln75_1_fu_345_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln75_fu_360_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal d_imm_inst_31_V_fu_276_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_imm_inst_7_V_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_310_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_imm_inst_11_8_V_fu_292_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_4_fu_320_p5 : STD_LOGIC_VECTOR (11 downto 0);
    signal d_i_func7_V_write_assign_fu_246_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_i_rd_V_write_assign_fu_206_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_3_fu_337_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_350_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_imm_inst_20_V_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_386_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12_assign_proc : process(instruction, ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50, ret_V_1_fu_396_p5, sext_ln75_2_fu_332_p1, sext_ln75_1_fu_345_p1, sext_ln75_fu_360_p1)
    begin
        if (((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_0) or ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_1) or (ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_7)))) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= ap_const_lv20_0;
        elsif ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_2)) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= sext_ln75_fu_360_p1;
        elsif ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_3)) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= sext_ln75_1_fu_345_p1;
        elsif ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_4)) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= sext_ln75_2_fu_332_p1;
        elsif ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_5)) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= instruction(31 downto 12);
        elsif ((ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 = ap_const_lv3_6)) then 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= ret_V_1_fu_396_p5;
        else 
            ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50_assign_proc : process(opch_V_fu_256_p4, opcl_V_fu_266_p4)
    begin
        if (((opcl_V_fu_266_p4 = ap_const_lv3_0) and (opch_V_fu_256_p4 = ap_const_lv2_3))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_4;
        elsif (((opcl_V_fu_266_p4 = ap_const_lv3_0) and (opch_V_fu_256_p4 = ap_const_lv2_1))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_3;
        elsif ((((opcl_V_fu_266_p4 = ap_const_lv3_0) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_4) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_1) and (opch_V_fu_256_p4 = ap_const_lv2_3)))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_2;
        elsif (((opcl_V_fu_266_p4 = ap_const_lv3_3) and (opch_V_fu_256_p4 = ap_const_lv2_3))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_6;
        elsif (((opcl_V_fu_266_p4 = ap_const_lv3_4) and (opch_V_fu_256_p4 = ap_const_lv2_1))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_1;
        elsif ((((opcl_V_fu_266_p4 = ap_const_lv3_5) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_5) and (opch_V_fu_256_p4 = ap_const_lv2_0)))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_5;
        elsif (((opch_V_fu_256_p4 = ap_const_lv2_2) or ((opcl_V_fu_266_p4 = ap_const_lv3_4) and (opch_V_fu_256_p4 = ap_const_lv2_3)) or ((opcl_V_fu_266_p4 = ap_const_lv3_1) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_1) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_2) and (opch_V_fu_256_p4 = ap_const_lv2_3)) or ((opcl_V_fu_266_p4 = ap_const_lv3_2) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_2) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_3) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_3) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_5) and (opch_V_fu_256_p4 = ap_const_lv2_3)) or ((opcl_V_fu_266_p4 = ap_const_lv3_6) and (opch_V_fu_256_p4 = ap_const_lv2_3)) or ((opcl_V_fu_266_p4 = ap_const_lv3_6) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_6) and (opch_V_fu_256_p4 = ap_const_lv2_0)) or ((opcl_V_fu_266_p4 = ap_const_lv3_7) and (opch_V_fu_256_p4 = ap_const_lv2_3)) or ((opcl_V_fu_266_p4 = ap_const_lv3_7) and (opch_V_fu_256_p4 = ap_const_lv2_1)) or ((opcl_V_fu_266_p4 = ap_const_lv3_7) and (opch_V_fu_256_p4 = ap_const_lv2_0)))) then 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= ap_const_lv3_7;
        else 
            ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50 <= "XXX";
        end if; 
    end process;

    ap_ready <= ap_const_logic_1;
    ap_return_0 <= instruction(6 downto 2);
    ap_return_1 <= instruction(11 downto 7);
    ap_return_2 <= instruction(14 downto 12);
    ap_return_3 <= instruction(19 downto 15);
    ap_return_4 <= instruction(24 downto 20);
    ap_return_5 <= instruction(31 downto 25);
    ap_return_6 <= ap_phi_mux_d_i_type_V_write_assign_phi_fu_101_p50;
    ap_return_7 <= ap_phi_mux_d_i_imm_V_write_assign_phi_fu_181_p12;
    d_i_func7_V_write_assign_fu_246_p4 <= instruction(31 downto 25);
    d_i_rd_V_write_assign_fu_206_p4 <= instruction(11 downto 7);
    d_imm_inst_11_8_V_fu_292_p4 <= instruction(11 downto 8);
    d_imm_inst_20_V_fu_284_p3 <= instruction(20 downto 20);
    d_imm_inst_31_V_fu_276_p3 <= instruction(31 downto 31);
    d_imm_inst_7_V_fu_302_p3 <= instruction(7 downto 7);
    opch_V_fu_256_p4 <= instruction(6 downto 5);
    opcl_V_fu_266_p4 <= instruction(4 downto 2);
    ret_V_1_fu_396_p5 <= (((d_imm_inst_31_V_fu_276_p3 & tmp_fu_376_p4) & d_imm_inst_20_V_fu_284_p3) & tmp_1_fu_386_p4);
    ret_V_3_fu_337_p3 <= (d_i_func7_V_write_assign_fu_246_p4 & d_i_rd_V_write_assign_fu_206_p4);
    ret_V_4_fu_320_p5 <= (((d_imm_inst_31_V_fu_276_p3 & d_imm_inst_7_V_fu_302_p3) & tmp_4_fu_310_p4) & d_imm_inst_11_8_V_fu_292_p4);
    ret_V_fu_350_p4 <= instruction(31 downto 20);
        sext_ln75_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_fu_337_p3),20));

        sext_ln75_2_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_4_fu_320_p5),20));

        sext_ln75_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_350_p4),20));

    tmp_1_fu_386_p4 <= instruction(30 downto 21);
    tmp_4_fu_310_p4 <= instruction(30 downto 25);
    tmp_fu_376_p4 <= instruction(19 downto 12);
end behav;
