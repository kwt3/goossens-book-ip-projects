-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fde_ip_fde_ip_Pipeline_VITIS_LOOP_44_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reg_file_31_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_10_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_11_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_12_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_13_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_14_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_15_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_16_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_17_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_18_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_19_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_20_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_21_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_22_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_23_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_24_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_25_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_26_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_27_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_28_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_29_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_file_30_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pc_V : IN STD_LOGIC_VECTOR (15 downto 0);
    code_ram_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    code_ram_ce0 : OUT STD_LOGIC;
    code_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nbi_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    nbi_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fde_ip_fde_ip_Pipeline_VITIS_LOOP_44_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal is_running_V_running_cond_update_fu_519_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal pc_V_2_load_reg_1416 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal grp_fetch_fu_455_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal instruction_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal grp_fetch_fu_455_ap_start : STD_LOGIC;
    signal grp_fetch_fu_455_ap_done : STD_LOGIC;
    signal grp_fetch_fu_455_ap_idle : STD_LOGIC;
    signal grp_fetch_fu_455_ap_ready : STD_LOGIC;
    signal grp_fetch_fu_455_code_ram_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fetch_fu_455_code_ram_ce0 : STD_LOGIC;
    signal decode_ret_decode_fu_462_ap_ready : STD_LOGIC;
    signal decode_ret_decode_fu_462_ap_return_0 : STD_LOGIC_VECTOR (4 downto 0);
    signal decode_ret_decode_fu_462_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal decode_ret_decode_fu_462_ap_return_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal decode_ret_decode_fu_462_ap_return_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal decode_ret_decode_fu_462_ap_return_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal decode_ret_decode_fu_462_ap_return_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal decode_ret_decode_fu_462_ap_return_6 : STD_LOGIC_VECTOR (2 downto 0);
    signal decode_ret_decode_fu_462_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_execute_fu_468_ap_start : STD_LOGIC;
    signal grp_execute_fu_468_ap_done : STD_LOGIC;
    signal grp_execute_fu_468_ap_idle : STD_LOGIC;
    signal grp_execute_fu_468_ap_ready : STD_LOGIC;
    signal grp_execute_fu_468_d_i_func7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_execute_fu_468_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_execute_fu_468_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_31 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_468_ap_return_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbi_statistic_update_fu_513_ap_ready : STD_LOGIC;
    signal nbi_statistic_update_fu_513_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal is_running_V_running_cond_update_fu_519_ap_ready : STD_LOGIC;
    signal grp_fetch_fu_455_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal grp_execute_fu_468_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal pc_V_2_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal reg_file_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_4_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_5_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_6_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_7_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_8_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_9_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_10_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_11_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_12_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_13_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_14_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_15_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_16_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_17_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_18_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_19_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_20_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_21_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_22_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_23_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_24_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_25_fu_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_26_fu_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_27_fu_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_28_fu_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_29_fu_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_30_fu_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_file_31_fu_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbi_1_fu_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fde_ip_fetch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pc : IN STD_LOGIC_VECTOR (15 downto 0);
        code_ram_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        code_ram_ce0 : OUT STD_LOGIC;
        code_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fde_ip_decode IS
    port (
        ap_ready : OUT STD_LOGIC;
        instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component fde_ip_execute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pc : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (31 downto 0);
        d_i_opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_rd : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_func3 : IN STD_LOGIC_VECTOR (2 downto 0);
        d_i_rs1 : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_rs2 : IN STD_LOGIC_VECTOR (4 downto 0);
        d_i_func7 : IN STD_LOGIC_VECTOR (5 downto 0);
        d_i_type : IN STD_LOGIC_VECTOR (2 downto 0);
        d_i_imm : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fde_ip_statistic_update IS
    port (
        ap_ready : OUT STD_LOGIC;
        nbi_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fde_ip_running_cond_update IS
    port (
        ap_ready : OUT STD_LOGIC;
        instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        pc : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fde_ip_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_fetch_fu_455 : component fde_ip_fetch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fetch_fu_455_ap_start,
        ap_done => grp_fetch_fu_455_ap_done,
        ap_idle => grp_fetch_fu_455_ap_idle,
        ap_ready => grp_fetch_fu_455_ap_ready,
        pc => pc_V_2_fu_114,
        code_ram_address0 => grp_fetch_fu_455_code_ram_address0,
        code_ram_ce0 => grp_fetch_fu_455_code_ram_ce0,
        code_ram_q0 => code_ram_q0,
        ap_return => grp_fetch_fu_455_ap_return);

    decode_ret_decode_fu_462 : component fde_ip_decode
    port map (
        ap_ready => decode_ret_decode_fu_462_ap_ready,
        instruction => grp_fetch_fu_455_ap_return,
        ap_return_0 => decode_ret_decode_fu_462_ap_return_0,
        ap_return_1 => decode_ret_decode_fu_462_ap_return_1,
        ap_return_2 => decode_ret_decode_fu_462_ap_return_2,
        ap_return_3 => decode_ret_decode_fu_462_ap_return_3,
        ap_return_4 => decode_ret_decode_fu_462_ap_return_4,
        ap_return_5 => decode_ret_decode_fu_462_ap_return_5,
        ap_return_6 => decode_ret_decode_fu_462_ap_return_6,
        ap_return_7 => decode_ret_decode_fu_462_ap_return_7);

    grp_execute_fu_468 : component fde_ip_execute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_execute_fu_468_ap_start,
        ap_done => grp_execute_fu_468_ap_done,
        ap_idle => grp_execute_fu_468_ap_idle,
        ap_ready => grp_execute_fu_468_ap_ready,
        pc => pc_V_2_load_reg_1416,
        p_read => reg_file_fu_118,
        p_read1 => reg_file_1_fu_122,
        p_read2 => reg_file_2_fu_126,
        p_read3 => reg_file_3_fu_130,
        p_read4 => reg_file_4_fu_134,
        p_read5 => reg_file_5_fu_138,
        p_read6 => reg_file_6_fu_142,
        p_read7 => reg_file_7_fu_146,
        p_read8 => reg_file_8_fu_150,
        p_read9 => reg_file_9_fu_154,
        p_read10 => reg_file_10_fu_158,
        p_read11 => reg_file_11_fu_162,
        p_read12 => reg_file_12_fu_166,
        p_read13 => reg_file_13_fu_170,
        p_read14 => reg_file_14_fu_174,
        p_read15 => reg_file_15_fu_178,
        p_read16 => reg_file_16_fu_182,
        p_read17 => reg_file_17_fu_186,
        p_read18 => reg_file_18_fu_190,
        p_read19 => reg_file_19_fu_194,
        p_read20 => reg_file_20_fu_198,
        p_read21 => reg_file_21_fu_202,
        p_read22 => reg_file_22_fu_206,
        p_read23 => reg_file_23_fu_210,
        p_read24 => reg_file_24_fu_214,
        p_read25 => reg_file_25_fu_218,
        p_read26 => reg_file_26_fu_222,
        p_read27 => reg_file_27_fu_226,
        p_read28 => reg_file_28_fu_230,
        p_read29 => reg_file_29_fu_234,
        p_read30 => reg_file_30_fu_238,
        p_read31 => reg_file_31_fu_242,
        d_i_opcode => decode_ret_decode_fu_462_ap_return_0,
        d_i_rd => decode_ret_decode_fu_462_ap_return_1,
        d_i_func3 => decode_ret_decode_fu_462_ap_return_2,
        d_i_rs1 => decode_ret_decode_fu_462_ap_return_3,
        d_i_rs2 => decode_ret_decode_fu_462_ap_return_4,
        d_i_func7 => grp_execute_fu_468_d_i_func7,
        d_i_type => decode_ret_decode_fu_462_ap_return_6,
        d_i_imm => decode_ret_decode_fu_462_ap_return_7,
        ap_return_0 => grp_execute_fu_468_ap_return_0,
        ap_return_1 => grp_execute_fu_468_ap_return_1,
        ap_return_2 => grp_execute_fu_468_ap_return_2,
        ap_return_3 => grp_execute_fu_468_ap_return_3,
        ap_return_4 => grp_execute_fu_468_ap_return_4,
        ap_return_5 => grp_execute_fu_468_ap_return_5,
        ap_return_6 => grp_execute_fu_468_ap_return_6,
        ap_return_7 => grp_execute_fu_468_ap_return_7,
        ap_return_8 => grp_execute_fu_468_ap_return_8,
        ap_return_9 => grp_execute_fu_468_ap_return_9,
        ap_return_10 => grp_execute_fu_468_ap_return_10,
        ap_return_11 => grp_execute_fu_468_ap_return_11,
        ap_return_12 => grp_execute_fu_468_ap_return_12,
        ap_return_13 => grp_execute_fu_468_ap_return_13,
        ap_return_14 => grp_execute_fu_468_ap_return_14,
        ap_return_15 => grp_execute_fu_468_ap_return_15,
        ap_return_16 => grp_execute_fu_468_ap_return_16,
        ap_return_17 => grp_execute_fu_468_ap_return_17,
        ap_return_18 => grp_execute_fu_468_ap_return_18,
        ap_return_19 => grp_execute_fu_468_ap_return_19,
        ap_return_20 => grp_execute_fu_468_ap_return_20,
        ap_return_21 => grp_execute_fu_468_ap_return_21,
        ap_return_22 => grp_execute_fu_468_ap_return_22,
        ap_return_23 => grp_execute_fu_468_ap_return_23,
        ap_return_24 => grp_execute_fu_468_ap_return_24,
        ap_return_25 => grp_execute_fu_468_ap_return_25,
        ap_return_26 => grp_execute_fu_468_ap_return_26,
        ap_return_27 => grp_execute_fu_468_ap_return_27,
        ap_return_28 => grp_execute_fu_468_ap_return_28,
        ap_return_29 => grp_execute_fu_468_ap_return_29,
        ap_return_30 => grp_execute_fu_468_ap_return_30,
        ap_return_31 => grp_execute_fu_468_ap_return_31,
        ap_return_32 => grp_execute_fu_468_ap_return_32);

    nbi_statistic_update_fu_513 : component fde_ip_statistic_update
    port map (
        ap_ready => nbi_statistic_update_fu_513_ap_ready,
        nbi_read => nbi_1_fu_246,
        ap_return => nbi_statistic_update_fu_513_ap_return);

    is_running_V_running_cond_update_fu_519 : component fde_ip_running_cond_update
    port map (
        ap_ready => is_running_V_running_cond_update_fu_519_ap_ready,
        instruction => instruction_reg_1422,
        pc => grp_execute_fu_468_ap_return_0,
        ap_return => is_running_V_running_cond_update_fu_519_ap_return);

    flow_control_loop_pipe_sequential_init_U : component fde_ip_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_execute_fu_468_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_execute_fu_468_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_NS_fsm_state3))) then 
                    grp_execute_fu_468_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_execute_fu_468_ap_ready = ap_const_logic_1)) then 
                    grp_execute_fu_468_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fetch_fu_455_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fetch_fu_455_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_fetch_fu_455_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fetch_fu_455_ap_ready = ap_const_logic_1)) then 
                    grp_fetch_fu_455_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    nbi_1_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                nbi_1_fu_246 <= ap_const_lv32_0;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                nbi_1_fu_246 <= nbi_statistic_update_fu_513_ap_return;
            end if; 
        end if;
    end process;

    pc_V_2_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                pc_V_2_fu_114 <= pc_V;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                pc_V_2_fu_114 <= grp_execute_fu_468_ap_return_0;
            end if; 
        end if;
    end process;

    reg_file_10_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_10_fu_158 <= reg_file_20_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_10_fu_158 <= grp_execute_fu_468_ap_return_11;
            end if; 
        end if;
    end process;

    reg_file_11_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_11_fu_162 <= reg_file_19_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_11_fu_162 <= grp_execute_fu_468_ap_return_12;
            end if; 
        end if;
    end process;

    reg_file_12_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_12_fu_166 <= reg_file_18_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_12_fu_166 <= grp_execute_fu_468_ap_return_13;
            end if; 
        end if;
    end process;

    reg_file_13_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_13_fu_170 <= reg_file_17_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_13_fu_170 <= grp_execute_fu_468_ap_return_14;
            end if; 
        end if;
    end process;

    reg_file_14_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_14_fu_174 <= reg_file_16_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_14_fu_174 <= grp_execute_fu_468_ap_return_15;
            end if; 
        end if;
    end process;

    reg_file_15_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_15_fu_178 <= reg_file_15_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_15_fu_178 <= grp_execute_fu_468_ap_return_16;
            end if; 
        end if;
    end process;

    reg_file_16_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_16_fu_182 <= reg_file_14_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_16_fu_182 <= grp_execute_fu_468_ap_return_17;
            end if; 
        end if;
    end process;

    reg_file_17_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_17_fu_186 <= reg_file_13_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_17_fu_186 <= grp_execute_fu_468_ap_return_18;
            end if; 
        end if;
    end process;

    reg_file_18_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_18_fu_190 <= reg_file_12_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_18_fu_190 <= grp_execute_fu_468_ap_return_19;
            end if; 
        end if;
    end process;

    reg_file_19_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_19_fu_194 <= reg_file_11_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_19_fu_194 <= grp_execute_fu_468_ap_return_20;
            end if; 
        end if;
    end process;

    reg_file_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_1_fu_122 <= reg_file_29_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_1_fu_122 <= grp_execute_fu_468_ap_return_2;
            end if; 
        end if;
    end process;

    reg_file_20_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_20_fu_198 <= reg_file_10_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_20_fu_198 <= grp_execute_fu_468_ap_return_21;
            end if; 
        end if;
    end process;

    reg_file_21_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_21_fu_202 <= reg_file_9_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_21_fu_202 <= grp_execute_fu_468_ap_return_22;
            end if; 
        end if;
    end process;

    reg_file_22_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_22_fu_206 <= reg_file_8_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_22_fu_206 <= grp_execute_fu_468_ap_return_23;
            end if; 
        end if;
    end process;

    reg_file_23_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_23_fu_210 <= reg_file_7_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_23_fu_210 <= grp_execute_fu_468_ap_return_24;
            end if; 
        end if;
    end process;

    reg_file_24_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_24_fu_214 <= reg_file_6_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_24_fu_214 <= grp_execute_fu_468_ap_return_25;
            end if; 
        end if;
    end process;

    reg_file_25_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_25_fu_218 <= reg_file_5_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_25_fu_218 <= grp_execute_fu_468_ap_return_26;
            end if; 
        end if;
    end process;

    reg_file_26_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_26_fu_222 <= reg_file_4_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_26_fu_222 <= grp_execute_fu_468_ap_return_27;
            end if; 
        end if;
    end process;

    reg_file_27_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_27_fu_226 <= reg_file_3_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_27_fu_226 <= grp_execute_fu_468_ap_return_28;
            end if; 
        end if;
    end process;

    reg_file_28_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_28_fu_230 <= reg_file_2_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_28_fu_230 <= grp_execute_fu_468_ap_return_29;
            end if; 
        end if;
    end process;

    reg_file_29_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_29_fu_234 <= reg_file_1_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_29_fu_234 <= grp_execute_fu_468_ap_return_30;
            end if; 
        end if;
    end process;

    reg_file_2_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_2_fu_126 <= reg_file_28_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_2_fu_126 <= grp_execute_fu_468_ap_return_3;
            end if; 
        end if;
    end process;

    reg_file_30_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_30_fu_238 <= reg_file_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_30_fu_238 <= grp_execute_fu_468_ap_return_31;
            end if; 
        end if;
    end process;

    reg_file_31_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_31_fu_242 <= reg_file_31_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_31_fu_242 <= grp_execute_fu_468_ap_return_32;
            end if; 
        end if;
    end process;

    reg_file_3_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_3_fu_130 <= reg_file_27_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_3_fu_130 <= grp_execute_fu_468_ap_return_4;
            end if; 
        end if;
    end process;

    reg_file_4_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_4_fu_134 <= reg_file_26_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_4_fu_134 <= grp_execute_fu_468_ap_return_5;
            end if; 
        end if;
    end process;

    reg_file_5_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_5_fu_138 <= reg_file_25_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_5_fu_138 <= grp_execute_fu_468_ap_return_6;
            end if; 
        end if;
    end process;

    reg_file_6_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_6_fu_142 <= reg_file_24_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_6_fu_142 <= grp_execute_fu_468_ap_return_7;
            end if; 
        end if;
    end process;

    reg_file_7_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_7_fu_146 <= reg_file_23_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_7_fu_146 <= grp_execute_fu_468_ap_return_8;
            end if; 
        end if;
    end process;

    reg_file_8_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_8_fu_150 <= reg_file_22_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_8_fu_150 <= grp_execute_fu_468_ap_return_9;
            end if; 
        end if;
    end process;

    reg_file_9_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_9_fu_154 <= reg_file_21_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_9_fu_154 <= grp_execute_fu_468_ap_return_10;
            end if; 
        end if;
    end process;

    reg_file_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                reg_file_fu_118 <= reg_file_30_reload;
            elsif (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_file_fu_118 <= grp_execute_fu_468_ap_return_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                instruction_reg_1422 <= grp_fetch_fu_455_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                pc_V_2_load_reg_1416 <= pc_V_2_fu_114;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_CS_fsm_state6, is_running_V_running_cond_update_fu_519_ap_return)
    begin
        if (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state6, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    code_ram_address0 <= grp_fetch_fu_455_code_ram_address0;
    code_ram_ce0 <= grp_fetch_fu_455_code_ram_ce0;
    grp_execute_fu_468_ap_start <= grp_execute_fu_468_ap_start_reg;
    grp_execute_fu_468_d_i_func7 <= decode_ret_decode_fu_462_ap_return_5(6 - 1 downto 0);
    grp_fetch_fu_455_ap_start <= grp_fetch_fu_455_ap_start_reg;
    nbi_out <= nbi_statistic_update_fu_513_ap_return;

    nbi_out_ap_vld_assign_proc : process(ap_CS_fsm_state6, is_running_V_running_cond_update_fu_519_ap_return)
    begin
        if (((is_running_V_running_cond_update_fu_519_ap_return = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            nbi_out_ap_vld <= ap_const_logic_1;
        else 
            nbi_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
