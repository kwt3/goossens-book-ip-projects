#The simulation print for the "test_branch.h" run
0000: ff800513      li a0, -8
     a0  =               -8 (fffffff8)
0004: 00500593      li a1, 5
     a1  =                5 (       5)
0008: 00b50463      beq a0, a1, 16
     pc  =               12 (       c)
0012: 00100613      li a2, 1
     a2  =                1 (       1)
0016: 00b51463      bne a0, a1, 24
     pc  =               24 (      18)
0024: 00b54463      blt a0, a1, 32
     pc  =               32 (      20)
0032: 00b55463      bge a0, a1, 40
     pc  =               36 (      24)
0036: 00200693      li a3, 2
     a3  =                2 (       2)
0040: 00b56463      bltu a0, a1, 48
     pc  =               44 (      2c)
0044: 00100713      li a4, 1
     a4  =                1 (       1)
0048: 00b57463      bgeu a0, a1, 56
     pc  =               56 (      38)
0056: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =                0 (       0)
t2  =                0 (       0)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =               -8 (fffffff8)
a1  =                5 (       5)
a2  =                1 (       1)
a3  =                2 (       2)
a4  =                1 (       1)
a5  =                0 (       0)
a6  =                0 (       0)
a7  =                0 (       0)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
12 fetched and decoded instructions
data memory dump (non null words)

#The simulation print for the "test_jal_jalr.h" run
0000: 00008293      addi t0, ra, 0
     t0  =                0 (       0)
0004: 00000517      auipc a0, 0
     a0  =                4 (       4)
0008: 00000597      auipc a1, 0
     a1  =                8 (       8)
0012: 00000613      li a2, 0
     a2  =                0 (       0)
0016: 00000713      li a4, 0
     a4  =                0 (       0)
0020: 0040006f      j 24
     pc  =               24 (      18)
0024: 00160613      addi a2, a2, 1
     a2  =                1 (       1)
0028: 020000ef      jal ra, 60
     pc  =               60 (      3c)
     ra  =               32 (      20)
0060: 00160613      addi a2, a2, 1
     a2  =                2 (       2)
0064: 00008067      ret
     pc  =               32 (      20)
0032: 00300693      li a3, 3
     a3  =                3 (       3)
0036: 034580e7      jalr 52(a1)
     pc  =               60 (      3c)
     ra  =               40 (      28)
0060: 00160613      addi a2, a2, 1
     a2  =                3 (       3)
0064: 00008067      ret
     pc  =               40 (      28)
0040: 02c50067      jr 44(a0)
     pc  =               48 (      30)
0048: 00170713      addi a4, a4, 1
     a4  =                1 (       1)
0052: 00028093      addi ra, t0, 0
     ra  =                0 (       0)
0056: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =                0 (       0)
t2  =                0 (       0)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =                4 (       4)
a1  =                8 (       8)
a2  =                3 (       3)
a3  =                3 (       3)
a4  =                1 (       1)
a5  =                0 (       0)
a6  =                0 (       0)
a7  =                0 (       0)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
18 fetched and decoded instructions
data memory dump (non null words)

#The simulation print for the "test_load_store.h" run
0000: 00100293      li t0, 1
     t0  =                1 (       1)
0004: 00200313      li t1, 2
     t1  =                2 (       2)
0008: ffd00393      li t2, -3
     t2  =               -3 (fffffffd)
0012: ffc00e13      li t3, -4
     t3  =               -4 (fffffffc)
0016: 00000513      li a0, 0
     a0  =                0 (       0)
0020: 00552023      sw t0, 0(a0)
     m[       0] =                1 (       1)
0024: 00450513      addi a0, a0, 4
     a0  =                4 (       4)
0028: 00651023      sh t1, 0(a0)
     m[       4] =                2 (       2)
0032: 00551123      sh t0, 2(a0)
     m[       4] =                1 (       1)
0036: 00450513      addi a0, a0, 4
     a0  =                8 (       8)
0040: 01c50023      sb t3, 0(a0)
     m[       8] =               -4 (fffffffc)
0044: 007500a3      sb t2, 1(a0)
     m[       8] =               -3 (fffffffd)
0048: 00650123      sb t1, 2(a0)
     m[       8] =                2 (       2)
0052: 005501a3      sb t0, 3(a0)
     m[       8] =                1 (       1)
0056: 00050583      lb a1, 0(a0)
     a1  =               -4 (fffffffc)    (m[       8])
0060: 00150603      lb a2, 1(a0)
     a2  =               -3 (fffffffd)    (m[       8])
0064: 00250683      lb a3, 2(a0)
     a3  =                2 (       2)    (m[       8])
0068: 00350703      lb a4, 3(a0)
     a4  =                1 (       1)    (m[       8])
0072: 00054783      lbu a5, 0(a0)
     a5  =              252 (      fc)    (m[       8])
0076: 00154803      lbu a6, 1(a0)
     a6  =              253 (      fd)    (m[       8])
0080: 00254883      lbu a7, 2(a0)
     a7  =                2 (       2)    (m[       8])
0084: ffc50513      addi a0, a0, -4
     a0  =                4 (       4)
0088: 00251403      lh s0, 2(a0)
     s0  =                1 (       1)    (m[       4])
0092: 00051483      lh s1, 0(a0)
     s1  =                2 (       2)    (m[       4])
0096: 00455903      lhu s2, 4(a0)
     s2  =            65020 (    fdfc)    (m[       8])
0100: 00655983      lhu s3, 6(a0)
     s3  =              258 (     102)    (m[       8])
0104: ffc50513      addi a0, a0, -4
     a0  =                0 (       0)
0108: 00852a03      lw s4, 8(a0)
     s4  =         16973308 ( 102fdfc)    (m[       8])
0112: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                1 (       1)
t1  =                2 (       2)
t2  =               -3 (fffffffd)
s0  =                1 (       1)
s1  =                2 (       2)
a0  =                0 (       0)
a1  =               -4 (fffffffc)
a2  =               -3 (fffffffd)
a3  =                2 (       2)
a4  =                1 (       1)
a5  =              252 (      fc)
a6  =              253 (      fd)
a7  =                2 (       2)
s2  =            65020 (    fdfc)
s3  =              258 (     102)
s4  =         16973308 ( 102fdfc)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =               -4 (fffffffc)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
29 fetched and decoded instructions
data memory dump (non null words)

m[   0] =                1 (       1)
m[   4] =            65538 (   10002)
m[   8] =         16973308 ( 102fdfc)

#The simulation print for the "test_lui_auipc.h" run
0000: 000015b7      lui a1, 4096
     a1  =             4096 (    1000)
0004: 00001617      auipc a2, 4096
     a2  =             4100 (    1004)
0008: 40b60633      sub a2, a2, a1
     a2  =                4 (       4)
0012: 01460613      addi a2, a2, 20
     a2  =               24 (      18)
0016: 00060067      jr a2
     pc  =               24 (      18)
0024: 06400693      li a3, 100
     a3  =              100 (      64)
0028: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =                0 (       0)
t2  =                0 (       0)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =                0 (       0)
a1  =             4096 (    1000)
a2  =               24 (      18)
a3  =              100 (      64)
a4  =                0 (       0)
a5  =                0 (       0)
a6  =                0 (       0)
a7  =                0 (       0)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
7 fetched and decoded instructions
data memory dump (non null words)

#The simulation print for the "test_mem.h" run
0000: 00000513      li a0, 0
     a0  =                0 (       0)
0004: 00000593      li a1, 0
     a1  =                0 (       0)
0008: 00000613      li a2, 0
     a2  =                0 (       0)
0012: 02860693      addi a3, a2, 40
     a3  =               40 (      28)
0016: 00158593      addi a1, a1, 1
     a1  =                1 (       1)
0020: 00b62023      sw a1, 0(a2)
     m[       0] =                1 (       1)
0024: 00460613      addi a2, a2, 4
     a2  =                4 (       4)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                2 (       2)
0020: 00b62023      sw a1, 0(a2)
     m[       4] =                2 (       2)
0024: 00460613      addi a2, a2, 4
     a2  =                8 (       8)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                3 (       3)
0020: 00b62023      sw a1, 0(a2)
     m[       8] =                3 (       3)
0024: 00460613      addi a2, a2, 4
     a2  =               12 (       c)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                4 (       4)
0020: 00b62023      sw a1, 0(a2)
     m[       c] =                4 (       4)
0024: 00460613      addi a2, a2, 4
     a2  =               16 (      10)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                5 (       5)
0020: 00b62023      sw a1, 0(a2)
     m[      10] =                5 (       5)
0024: 00460613      addi a2, a2, 4
     a2  =               20 (      14)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                6 (       6)
0020: 00b62023      sw a1, 0(a2)
     m[      14] =                6 (       6)
0024: 00460613      addi a2, a2, 4
     a2  =               24 (      18)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                7 (       7)
0020: 00b62023      sw a1, 0(a2)
     m[      18] =                7 (       7)
0024: 00460613      addi a2, a2, 4
     a2  =               28 (      1c)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                8 (       8)
0020: 00b62023      sw a1, 0(a2)
     m[      1c] =                8 (       8)
0024: 00460613      addi a2, a2, 4
     a2  =               32 (      20)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =                9 (       9)
0020: 00b62023      sw a1, 0(a2)
     m[      20] =                9 (       9)
0024: 00460613      addi a2, a2, 4
     a2  =               36 (      24)
0028: fed61ae3      bne a2, a3, 16
     pc  =               16 (      10)
0016: 00158593      addi a1, a1, 1
     a1  =               10 (       a)
0020: 00b62023      sw a1, 0(a2)
     m[      24] =               10 (       a)
0024: 00460613      addi a2, a2, 4
     a2  =               40 (      28)
0028: fed61ae3      bne a2, a3, 16
     pc  =               32 (      20)
0032: 00000593      li a1, 0
     a1  =                0 (       0)
0036: 00000613      li a2, 0
     a2  =                0 (       0)
0040: 00062703      lw a4, 0(a2)
     a4  =                1 (       1)    (m[       0])
0044: 00e50533      add a0, a0, a4
     a0  =                1 (       1)
0048: 00460613      addi a2, a2, 4
     a2  =                4 (       4)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                2 (       2)    (m[       4])
0044: 00e50533      add a0, a0, a4
     a0  =                3 (       3)
0048: 00460613      addi a2, a2, 4
     a2  =                8 (       8)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                3 (       3)    (m[       8])
0044: 00e50533      add a0, a0, a4
     a0  =                6 (       6)
0048: 00460613      addi a2, a2, 4
     a2  =               12 (       c)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                4 (       4)    (m[       c])
0044: 00e50533      add a0, a0, a4
     a0  =               10 (       a)
0048: 00460613      addi a2, a2, 4
     a2  =               16 (      10)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                5 (       5)    (m[      10])
0044: 00e50533      add a0, a0, a4
     a0  =               15 (       f)
0048: 00460613      addi a2, a2, 4
     a2  =               20 (      14)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                6 (       6)    (m[      14])
0044: 00e50533      add a0, a0, a4
     a0  =               21 (      15)
0048: 00460613      addi a2, a2, 4
     a2  =               24 (      18)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                7 (       7)    (m[      18])
0044: 00e50533      add a0, a0, a4
     a0  =               28 (      1c)
0048: 00460613      addi a2, a2, 4
     a2  =               28 (      1c)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                8 (       8)    (m[      1c])
0044: 00e50533      add a0, a0, a4
     a0  =               36 (      24)
0048: 00460613      addi a2, a2, 4
     a2  =               32 (      20)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =                9 (       9)    (m[      20])
0044: 00e50533      add a0, a0, a4
     a0  =               45 (      2d)
0048: 00460613      addi a2, a2, 4
     a2  =               36 (      24)
0052: fed61ae3      bne a2, a3, 40
     pc  =               40 (      28)
0040: 00062703      lw a4, 0(a2)
     a4  =               10 (       a)    (m[      24])
0044: 00e50533      add a0, a0, a4
     a0  =               55 (      37)
0048: 00460613      addi a2, a2, 4
     a2  =               40 (      28)
0052: fed61ae3      bne a2, a3, 40
     pc  =               56 (      38)
0056: 00a62223      sw a0, 4(a2)
     m[      2c] =               55 (      37)
0060: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =                0 (       0)
t2  =                0 (       0)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =               55 (      37)
a1  =                0 (       0)
a2  =               40 (      28)
a3  =               40 (      28)
a4  =               10 (       a)
a5  =                0 (       0)
a6  =                0 (       0)
a7  =                0 (       0)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
88 fetched and decoded instructions
data memory dump (non null words)

m[   0] =                1 (       1)
m[   4] =                2 (       2)
m[   8] =                3 (       3)
m[   c] =                4 (       4)
m[  10] =                5 (       5)
m[  14] =                6 (       6)
m[  18] =                7 (       7)
m[  1c] =                8 (       8)
m[  20] =                9 (       9)
m[  24] =               10 (       a)
m[  2c] =               55 (      37)

#The simulation print for the "test_op.h" run
0000: 00d00513      li a0, 13
     a0  =               13 (       d)
0004: 00c00713      li a4, 12
     a4  =               12 (       c)
0008: 00700593      li a1, 7
     a1  =                7 (       7)
0012: 01c00293      li t0, 28
     t0  =               28 (      1c)
0016: ff600f93      li t6, -10
     t6  =              -10 (fffffff6)
0020: 7e600913      li s2, 2022
     s2  =             2022 (     7e6)
0024: 00058633      add a2, a1, zero
     a2  =                7 (       7)
0028: 00a676b3      and a3, a2, a0
     a3  =                5 (       5)
0032: 00e6e7b3      or a5, a3, a4
     a5  =               13 (       d)
0036: 0057c833      xor a6, a5, t0
     a6  =               17 (      11)
0040: 40b80833      sub a6, a6, a1
     a6  =               10 (       a)
0044: 00a838b3      sltu a7, a6, a0
     a7  =                1 (       1)
0048: 00581333      sll t1, a6, t0
     t1  =      -1610612736 (a0000000)
0052: 01f323b3      slt t2, t1, t6
     t2  =                1 (       1)
0056: 01233e33      sltu t3, t1, s2
     t3  =                0 (       0)
0060: 00535eb3      srl t4, t1, t0
     t4  =               10 (       a)
0064: 40535f33      sra t5, t1, t0
     t5  =               -6 (fffffffa)
0068: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =               28 (      1c)
t1  =      -1610612736 (a0000000)
t2  =                1 (       1)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =               13 (       d)
a1  =                7 (       7)
a2  =                7 (       7)
a3  =                5 (       5)
a4  =               12 (       c)
a5  =               13 (       d)
a6  =               10 (       a)
a7  =                1 (       1)
s2  =             2022 (     7e6)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =               10 (       a)
t5  =               -6 (fffffffa)
t6  =              -10 (fffffff6)
18 fetched and decoded instructions
data memory dump (non null words)

#The simulation print for the "test_op_imm.h" run
0000: 00500593      li a1, 5
     a1  =                5 (       5)
0004: 00158613      addi a2, a1, 1
     a2  =                6 (       6)
0008: 00c67693      andi a3, a2, 12
     a3  =                4 (       4)
0012: fff68713      addi a4, a3, -1
     a4  =                3 (       3)
0016: 00576793      ori a5, a4, 5
     a5  =                7 (       7)
0020: 00c7c813      xori a6, a5, 12
     a6  =               11 (       b)
0024: 00d83893      sltiu a7, a6, 13
     a7  =                1 (       1)
0028: 00b83293      sltiu t0, a6, 11
     t0  =                0 (       0)
0032: 01c81313      slli t1, a6, 28
     t1  =      -1342177280 (b0000000)
0036: ff632393      slti t2, t1, -10
     t2  =                1 (       1)
0040: 7e633e13      sltiu t3, t1, 2022
     t3  =                0 (       0)
0044: 01c35e93      srli t4, t1, 28
     t4  =               11 (       b)
0048: 41c35f13      srai t5, t1, 28
     t5  =               -5 (fffffffb)
0052: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =      -1342177280 (b0000000)
t2  =                1 (       1)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =                0 (       0)
a1  =                5 (       5)
a2  =                6 (       6)
a3  =                4 (       4)
a4  =                3 (       3)
a5  =                7 (       7)
a6  =               11 (       b)
a7  =                1 (       1)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =               11 (       b)
t5  =               -5 (fffffffb)
t6  =                0 (       0)
14 fetched and decoded instructions
data memory dump (non null words)

#The simulation print for the "test_sum.h" run
0000: 00000513      li a0, 0
     a0  =                0 (       0)
0004: 00000593      li a1, 0
     a1  =                0 (       0)
0008: 00a00613      li a2, 10
     a2  =               10 (       a)
0012: 00158593      addi a1, a1, 1
     a1  =                1 (       1)
0016: 00b50533      add a0, a0, a1
     a0  =                1 (       1)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                2 (       2)
0016: 00b50533      add a0, a0, a1
     a0  =                3 (       3)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                3 (       3)
0016: 00b50533      add a0, a0, a1
     a0  =                6 (       6)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                4 (       4)
0016: 00b50533      add a0, a0, a1
     a0  =               10 (       a)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                5 (       5)
0016: 00b50533      add a0, a0, a1
     a0  =               15 (       f)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                6 (       6)
0016: 00b50533      add a0, a0, a1
     a0  =               21 (      15)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                7 (       7)
0016: 00b50533      add a0, a0, a1
     a0  =               28 (      1c)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                8 (       8)
0016: 00b50533      add a0, a0, a1
     a0  =               36 (      24)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =                9 (       9)
0016: 00b50533      add a0, a0, a1
     a0  =               45 (      2d)
0020: fec59ce3      bne a1, a2, 12
     pc  =               12 (       c)
0012: 00158593      addi a1, a1, 1
     a1  =               10 (       a)
0016: 00b50533      add a0, a0, a1
     a0  =               55 (      37)
0020: fec59ce3      bne a1, a2, 12
     pc  =               24 (      18)
0024: 00008067      ret
     pc  =                0 (       0)
ra  =                0 (       0)
sp  =                0 (       0)
gp  =                0 (       0)
tp  =                0 (       0)
t0  =                0 (       0)
t1  =                0 (       0)
t2  =                0 (       0)
s0  =                0 (       0)
s1  =                0 (       0)
a0  =               55 (      37)
a1  =               10 (       a)
a2  =               10 (       a)
a3  =                0 (       0)
a4  =                0 (       0)
a5  =                0 (       0)
a6  =                0 (       0)
a7  =                0 (       0)
s2  =                0 (       0)
s3  =                0 (       0)
s4  =                0 (       0)
s5  =                0 (       0)
s6  =                0 (       0)
s7  =                0 (       0)
s8  =                0 (       0)
s9  =                0 (       0)
s10 =                0 (       0)
s11 =                0 (       0)
t3  =                0 (       0)
t4  =                0 (       0)
t5  =                0 (       0)
t6  =                0 (       0)
34 fetched and decoded instructions
data memory dump (non null words)
