// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fetching_decoding_ip_execute (
        ap_ready,
        pc,
        d_i_type,
        d_i_imm,
        ap_return,
        ap_rst
);


output   ap_ready;
input  [14:0] pc;
input  [2:0] d_i_type;
input  [15:0] d_i_imm;
output  [14:0] ap_return;
input   ap_rst;

wire   [14:0] trunc_ln_fu_76_p4;
wire   [0:0] icmp_ln7_fu_92_p2;
wire   [0:0] icmp_ln7_1_fu_98_p2;
wire   [0:0] icmp_ln7_2_fu_104_p2;
wire   [0:0] icmp_ln7_3_fu_110_p2;
wire   [0:0] icmp_ln7_4_fu_116_p2;
wire   [0:0] icmp_ln7_5_fu_122_p2;
wire   [14:0] next_pc_fu_144_p2;
wire   [14:0] add_ln27_fu_70_p2;
wire   [14:0] next_pc_fu_144_p15;
wire   [5:0] next_pc_fu_144_p16;
wire   [14:0] next_pc_fu_144_p17;
wire  signed [5:0] next_pc_fu_144_p1;
wire   [5:0] next_pc_fu_144_p3;
wire   [5:0] next_pc_fu_144_p5;
wire   [5:0] next_pc_fu_144_p7;
wire   [5:0] next_pc_fu_144_p9;
wire   [5:0] next_pc_fu_144_p11;
wire   [5:0] next_pc_fu_144_p13;

(* dissolve_hierarchy = "yes" *) fetching_decoding_ip_sparsemux_15_6_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h20 ),
    .din0_WIDTH( 15 ),
    .CASE1( 6'h10 ),
    .din1_WIDTH( 15 ),
    .CASE2( 6'h8 ),
    .din2_WIDTH( 15 ),
    .CASE3( 6'h4 ),
    .din3_WIDTH( 15 ),
    .CASE4( 6'h2 ),
    .din4_WIDTH( 15 ),
    .CASE5( 6'h1 ),
    .din5_WIDTH( 15 ),
    .CASE6( 6'h0 ),
    .din6_WIDTH( 15 ),
    .def_WIDTH( 15 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 15 ))
sparsemux_15_6_15_1_1_U4(
    .din0(next_pc_fu_144_p2),
    .din1(add_ln27_fu_70_p2),
    .din2(add_ln27_fu_70_p2),
    .din3(add_ln27_fu_70_p2),
    .din4(add_ln27_fu_70_p2),
    .din5(add_ln27_fu_70_p2),
    .din6(add_ln27_fu_70_p2),
    .def(next_pc_fu_144_p15),
    .sel(next_pc_fu_144_p16),
    .dout(next_pc_fu_144_p17)
);

assign add_ln27_fu_70_p2 = (pc + 15'd1);

assign ap_ready = 1'b1;

assign trunc_ln_fu_76_p4 = {{d_i_imm[15:1]}};

assign ap_return = next_pc_fu_144_p17;

assign icmp_ln7_1_fu_98_p2 = ((d_i_type == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln7_2_fu_104_p2 = ((d_i_type == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln7_3_fu_110_p2 = ((d_i_type == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln7_4_fu_116_p2 = ((d_i_type == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln7_5_fu_122_p2 = ((d_i_type == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_92_p2 = ((d_i_type == 3'd6) ? 1'b1 : 1'b0);

assign next_pc_fu_144_p15 = 'bx;

assign next_pc_fu_144_p16 = {{{{{{icmp_ln7_fu_92_p2}, {icmp_ln7_1_fu_98_p2}}, {icmp_ln7_2_fu_104_p2}}, {icmp_ln7_3_fu_110_p2}}, {icmp_ln7_4_fu_116_p2}}, {icmp_ln7_5_fu_122_p2}};

assign next_pc_fu_144_p2 = (trunc_ln_fu_76_p4 + pc);

endmodule //fetching_decoding_ip_execute
